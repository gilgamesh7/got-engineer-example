Based on your requirements, we will need the following classes and functions:

1. `Game`: This class will represent the game itself. It will have methods to handle the game logic such as checking for a win or a draw, and updating the game state.

2. `Player`: This class will represent a player. It will have properties for the player's mark (nought or cross) and methods to make a move.

3. `GUI`: This class will handle the graphical user interface. It will have methods to draw the game board, update the display, and handle user input.

4. `main`: This function will be the entry point of the program. It will create instances of the `Game`, `Player`, and `GUI` classes and start the game loop.

Now, let's write the code for each of these components.

game.py
```python
import tkinter as tk

class Game:
    def __init__(self):
        self.board = [['' for _ in range(3)] for _ in range(3)]
        self.current_player = 'X'

    def make_move(self, row, col):
        if not self.board[row][col]:
            self.board[row][col] = self.current_player
            self.current_player = 'O' if self.current_player == 'X' else 'X'

    def check_win(self):
        for row in self.board:
            if row.count(row[0]) == len(row) and row[0] != '':
                return True
        for col in range(len(self.board[0])):
            check_col = [row[col] for row in self.board]
            if check_col.count(check_col[0]) == len(check_col) and check_col[0] != '':
                return True
        if self.board[0][0] == self.board[1][1] == self.board[2][2] != '':
            return True
        if self.board[0][2] == self.board[1][1] == self.board[2][0] != '':
            return True
        return False

    def check_draw(self):
        for row in self.board:
            if '' in row:
                return False
        return True
```

gui.py
```python
import tkinter as tk
from game import Game

class GUI:
    def __init__(self, game):
        self.game = game
        self.root = tk.Tk()
        self.canvas = tk.Canvas(self.root, width=600, height=600)
        self.canvas.pack()
        self.draw_board()

    def draw_board(self):
        for i in range(3):
            for j in range(3):
                self.canvas.create_rectangle(i * 200, j * 200, (i + 1) * 200, (j + 1) * 200)
                if self.game.board[i][j] == 'X':
                    self.canvas.create_line(i * 200, j * 200, (i + 1) * 200, (j + 1) * 200)
                    self.canvas.create_line((i + 1) * 200, j * 200, i * 200, (j + 1) * 200)
                elif self.game.board[i][j] == 'O':
                    self.canvas.create_oval(i * 200, j * 200, (i + 1) * 200, (j + 1) * 200)

    def update_display(self):
        self.canvas.delete('all')
        self.draw_board()

    def handle_click(self, event):
        row = event.y // 200
        col = event.x // 200
        self.game.make_move(row, col)
        self.update_display()
        if self.game.check_win():
            print('Player ' + self.game.current_player + ' wins!')
            self.root.quit()
        elif self.game.check_draw():
            print('The game is a draw!')
            self.root.quit()

    def start(self):
        self.canvas.bind('<Button-1>', self.handle_click)
        self.root.mainloop()
```

main.py
```python
from game import Game
from gui import GUI

def main():
    game = Game()
    gui = GUI(game)
    gui.start()

if __name__ == '__main__':
    main()
```

requirements.txt
```
tkinter==8.6
```

To run the game, you would need to run the `main.py` file. The `Game` class in `game.py` handles the game logic, and the `GUI` class in `gui.py` handles the graphical user interface. The `main` function in `main.py` creates instances of these classes and starts the game loop.